#===============================================================================
#
# This file has been generated by tools/build/makeSLICE.pl6
# on 2015-01-27T21:49:45Z.
#
# Please do *NOT* make changes to this file, as they will be lost
# whenever this file is generated again.
#
#===============================================================================

# internal 1 element list access with adverbs
sub SLICE_ONE_LIST(\SELF,$one,*%adv) is hidden_from_backtrace {
    my $d := CLONE-HASH-DECONTAINERIZED(%adv);

    my @nogo;
    my \result = do {

        if DELETEKEY($d,'delete') {            # :delete:*
            if DELETEKEY($d,'SINK') {            # :delete:SINK
                SELF.delete_pos($one,:SINK);
            }
            elsif nqp::elems($d) == 0 {       # :delete
                SELF.delete_pos($one);
            }
            elsif nqp::existskey($d,'exists') { # :delete:exists(0|1):*
                my $exists   := DELETEKEY($d,'exists');
                my $wasthere := SELF.exists_pos($one);
                SELF.delete_pos($one);
                if nqp::elems($d) == 0 {          # :delete:exists(0|1)
                    !( $wasthere ?^ $exists )
                }
                elsif nqp::existskey($d,'kv') {   # :delete:exists(0|1):kv(0|1)
                    my $kv := DELETEKEY($d,'kv');
                    if nqp::elems($d) == 0 {
                        !$kv || $wasthere
                          ?? ( $one, !( $wasthere ?^ $exists ) )
                          !! ();
                    }
                    else {
                        @nogo = <delete exists kv>;
                    }
                }
                elsif nqp::existskey($d,'p') {    # :delete:exists(0|1):p(0|1)
                    my $p := DELETEKEY($d,'p');
                    if nqp::elems($d) == 0 {
                        !$p || $wasthere
                          ?? RWPAIR($one, !($wasthere ?^ $exists) )
                          !! ();
                    }
                    else {
                        @nogo = <delete exists p>;
                    }
                }
                else {
                    @nogo = <delete exists>;
                }
            }
            elsif nqp::existskey($d,'kv') {    # :delete:kv(0|1)
                my $kv := DELETEKEY($d,'kv');
                if nqp::elems($d) == 0 {
                    !$kv || SELF.exists_pos($one)
                      ?? ( $one, SELF.delete_pos($one) )
                      !! ();
                }
                else {
                    @nogo = <delete kv>;
                }
            }
            elsif nqp::existskey($d,'p') {     # :delete:p(0|1)
                my $p := DELETEKEY($d,'p');
                if nqp::elems($d) == 0 {
                    !$p || SELF.exists_pos($one)
                      ?? RWPAIR($one, SELF.delete_pos($one))
                      !! ();
                }
                else {
                    @nogo = <delete p>;
                }
            }
            elsif nqp::existskey($d,'k') {     # :delete:k(0|1)
                my $k := DELETEKEY($d,'k');
                if nqp::elems($d) == 0 {
                    !$k || SELF.exists_pos($one)
                      ?? do { SELF.delete_pos($one); $one }
                      !! ();
                }
                else {
                    @nogo = <delete k>;
                }
            }
            elsif nqp::existskey($d,'v') {     # :delete:v(0|1)
                my $v := DELETEKEY($d,'v');
                if nqp::elems($d) == 0 {
                    !$v || SELF.exists_pos($one)
                      ?? SELF.delete_pos($one)
                      !! ();
                }
                else {
                    @nogo = <delete v>;
                }
            }
            else {
                @nogo = <delete>;
            }
        }
        elsif nqp::existskey($d,'exists') {  # :!delete?:exists(0|1):*
            my $exists  := DELETEKEY($d,'exists');
            my $wasthere = SELF.exists_pos($one);
            if nqp::elems($d) == 0 {           # :!delete?:exists(0|1)
                !( $wasthere ?^ $exists )
            }
            elsif nqp::existskey($d,'kv') {    # :!delete?:exists(0|1):kv(0|1)
                my $kv := DELETEKEY($d,'kv');
                if nqp::elems($d) == 0 {
                    !$kv || $wasthere
                      ?? ( $one, !( $wasthere ?^ $exists ) )
                      !! ();
                }
                else {
                    @nogo = <exists kv>;
                }
            }
            elsif nqp::existskey($d,'p') {     # :!delete?:exists(0|1):p(0|1)
                my $p := DELETEKEY($d,'p');
                if nqp::elems($d) == 0 {
                    !$p || $wasthere
                      ?? RWPAIR($one, !( $wasthere ?^ $exists ))
                      !! ();
                }
                else {
                    @nogo = <exists p>;
                }
            }
            else {
                @nogo = <exists>;
            }
        }
        elsif nqp::existskey($d,'kv') {      # :!delete?:kv(0|1):*
            my $kv := DELETEKEY($d,'kv');
            if nqp::elems($d) == 0 {           # :!delete?:kv(0|1)
                !$kv || SELF.exists_pos($one)
                  ?? ($one, SELF.at_pos($one))
                  !! ();
            }
            else {
                @nogo = <kv>;
            }
        }
        elsif nqp::existskey($d,'p') {       # :!delete?:p(0|1):*
            my $p := DELETEKEY($d,'p');
            if nqp::elems($d) == 0 {           # :!delete?:p(0|1)
                !$p || SELF.exists_pos($one)
                  ?? RWPAIR($one, SELF.at_pos($one))
                  !! ();
            }
            else {
                @nogo = <p>;
            }
        }
        elsif nqp::existskey($d,'k') {       # :!delete?:k(0|1):*
            my $k := DELETEKEY($d,'k');
            if nqp::elems($d) == 0 {           # :!delete?:k(0|1)
                !$k || SELF.exists_pos($one)
                  ?? $one
                  !! ();
            }
            else {
                @nogo = <k>;
            }
        }
        elsif nqp::existskey($d,'v') {       # :!delete?:v(0|1):*
            my $v := DELETEKEY($d,'v');           # :!delete?:v(0|1)
            if nqp::elems($d) == 0 {
                !$v || SELF.exists_pos($one)
                  ?? SELF.at_pos($one)
                  !! ();
            }
            else {
                @nogo = <v>;
            }
        }
        elsif nqp::elems($d) == 0 {           # :!delete
            SELF.at_pos($one);
        }
    }

    @nogo || nqp::elems($d)
      ?? SLICE_HUH( SELF, @nogo, $d, %adv )
      !! result;
} #SLICE_ONE_LIST

# internal >1 element list access with adverbs
sub SLICE_MORE_LIST(\SELF,$more,*%adv) is hidden_from_backtrace {
    my $d := CLONE-HASH-DECONTAINERIZED(%adv);
    my @nogo;

    my \result = do {

        if DELETEKEY($d,'delete') {            # :delete:*
            if DELETEKEY($d,'SINK') {            # :delete:SINK
                SELF.delete_pos($_,:SINK) for $more;
                Nil;
            }
            elsif nqp::elems($d) == 0 {       # :delete
                $more.list.map( { SELF.delete_pos($_) } ).eager.Parcel;
            }
            elsif nqp::existskey($d,'exists') { # :delete:exists(0|1):*
                my $exists := DELETEKEY($d,'exists');
                my $wasthere; # no need to initialize every iteration of map
                if nqp::elems($d) == 0 {          # :delete:exists(0|1)
                    $more.list.map( {
                        SELF.delete_pos($_) if $wasthere = SELF.exists_pos($_);
                        !( $wasthere ?^ $exists );
                    } ).eager.Parcel;
                }
                elsif nqp::existskey($d,'kv') { # :delete:exists(0|1):kv(0|1):*
                    my $kv := DELETEKEY($d,'kv');
                    if nqp::elems($d) == 0 {      # :delete:exists(0|1):kv(0|1)
                        $more.list.map( {
                            SELF.delete_pos($_) if $wasthere = SELF.exists_pos($_);
                            next unless !$kv || $wasthere;
                            ($_, !( $wasthere ?^ $exists ));
                        } ).flat.eager.Parcel;
                    }
                    else {
                        @nogo = <delete exists kv>;
                    }
                }
                elsif nqp::existskey($d,'p') {  # :delete:exists(0|1):p(0|1):*
                    my $p := DELETEKEY($d,'p');
                    if nqp::elems($d) == 0 {      # :delete:exists(0|1):p(0|1)
                        $more.list.map( {
                            SELF.delete_pos($_) if $wasthere = SELF.exists_pos($_);
                            next unless !$p || $wasthere;
                            RWPAIR($_,!($wasthere ?^ $exists));
                        } ).eager.Parcel;
                    }
                    else {
                        @nogo = <delete exists p>;
                    }
                }
                else {
                    @nogo = <delete exists>;
                }
            }
            elsif nqp::existskey($d,'kv') {     # :delete:kv(0|1):*
                my $kv := DELETEKEY($d,'kv');
                if nqp::elems($d) == 0 {          # :delete:kv(0|1)
                    $kv
                      ?? $more.list.map( {
                             next unless SELF.exists_pos($_);
                             ( $_, SELF.delete_pos($_) );
                         } ).flat.eager.Parcel
                      !! $more.list.map( {
                             ( $_, SELF.delete_pos($_) )
                         } ).flat.eager.Parcel;
                }
                else {
                    @nogo = <delete kv>;
                }
            }
            elsif nqp::existskey($d,'p') {      # :delete:p(0|1):*
                my $p := DELETEKEY($d,'p');
                if nqp::elems($d) == 0 {          # :delete:p(0|1)
                    $p
                      ?? $more.list.map( {
                             next unless SELF.exists_pos($_);
                             RWPAIR($_, SELF.delete_pos($_));
                         } ).eager.Parcel
                      !! $more.list.map( {
                             RWPAIR($_, SELF.delete_pos($_))
                         } ).eager.Parcel;
                }
                else {
                    @nogo = <delete p>;
                }
            }
            elsif nqp::existskey($d,'k') {     # :delete:k(0|1):*
                my $k := DELETEKEY($d,'k');
                if nqp::elems($d) == 0 {          # :delete:k(0|1)
                    $k
                      ?? $more.list.map( {
                             next unless SELF.exists_pos($_);
                             SEQ( SELF.delete_pos($_); $_ );
                         } ).eager.Parcel
                      !! $more.list.map( {
                             SELF.delete_pos($_); $_
                         } ).eager.Parcel;
                }
                else {
                    @nogo = <delete k>;
                }
            }
            elsif nqp::existskey($d,'v') {      # :delete:v(0|1):*
                my $v := DELETEKEY($d,'v');
                if nqp::elems($d) == 0 {          # :delete:v(0|1)
                    $v
                      ?? $more.list.map( {
                             next unless SELF.exists_pos($_);
                             SELF.delete_pos($_);
                     } ).eager.Parcel
                      !! $more.list.map( {
                             SELF.delete_pos($_)
                     } ).eager.Parcel;
                }
                else {
                    @nogo = <delete v>;
                }
            }
            else {
                @nogo = <delete>;
            }
        }
        elsif nqp::existskey($d,'exists') { # :!delete?:exists(0|1):*
            my $exists := DELETEKEY($d,'exists');
            if nqp::elems($d) == 0 {          # :!delete?:exists(0|1)
                $more.list.map({ !( SELF.exists_pos($_) ?^ $exists ) }).eager.Parcel;
            }
            elsif nqp::existskey($d,'kv') {   # :!delete?:exists(0|1):kv(0|1):*
                my $kv := DELETEKEY($d,'kv');
                if nqp::elems($d) == 0 {        # :!delete?:exists(0|1):kv(0|1)
                    $kv
                      ?? $more.list.map( {
                             next unless SELF.exists_pos($_);
                             ( $_, $exists );
                         } ).flat.eager.Parcel
                      !! $more.list.map( {
                             ( $_, !( SELF.exists_pos($_) ?^ $exists ) )
                         } ).flat.eager.Parcel;
                }
                else {
                    @nogo = <exists kv>;
                }
            }
            elsif nqp::existskey($d,'p') {  # :!delete?:exists(0|1):p(0|1):*
                my $p := DELETEKEY($d,'p');
                if nqp::elems($d) == 0 {      # :!delete?:exists(0|1):p(0|1)
                    $p
                      ?? $more.list.map( {
                             next unless SELF.exists_pos($_);
                             RWPAIR( $_, $exists );
                         } ).eager.Parcel
                      !! $more.list.map( {
                             RWPAIR( $_, !( SELF.exists_pos($_) ?^ $exists ) )
                         } ).eager.Parcel;
                }
                else {
                    @nogo = <exists p>;
                }
            }
            else {
                @nogo = <exists>;
            }
        }
        elsif nqp::existskey($d,'kv') {     # :!delete?:kv(0|1):*
            my $kv := DELETEKEY($d,'kv');
            if nqp::elems($d) == 0 {          # :!delete?:kv(0|1)
                $kv
                  ?? $more.list.map( {
                         next unless SELF.exists_pos($_);
                         $_, SELF.at_pos($_);
                     } ).flat.eager.Parcel
                  !! $more.list.map( {
                         $_, SELF.at_pos($_)
                     } ).flat.eager.Parcel;
            }
            else {
                @nogo = <kv>;
            }
        }
        elsif nqp::existskey($d,'p') {      # :!delete?:p(0|1):*
            my $p := DELETEKEY($d,'p');
            if nqp::elems($d) == 0 {          # :!delete?:p(0|1)
                $p
                  ?? $more.list.map( {
                         next unless SELF.exists_pos($_);
                         RWPAIR($_, SELF.at_pos($_));
                     } ).eager.Parcel
                  !! $more.list.map( {
                         RWPAIR( $_, SELF.at_pos($_) )
                     } ).eager.Parcel;
            }
            else {
                @nogo = <p>
            }
        }
        elsif nqp::existskey($d,'k') {      # :!delete?:k(0|1):*
            my $k := DELETEKEY($d,'k');
            if nqp::elems($d) == 0 {          # :!delete?:k(0|1)
                $k
                  ?? $more.list.map( {
                         next unless SELF.exists_pos($_);
                         $_;
                     } ).eager.Parcel
                  !! $more.list.flat.eager.Parcel;
            }
            else {
                @nogo = <k>;
            }
        }
        elsif nqp::existskey($d,'v') {      # :!delete?:v(0|1):*
            my $v := DELETEKEY($d,'v');
            if nqp::elems($d) == 0 {          # :!delete?:v(0|1)
                $v
                  ??  $more.list.map( {
                          next unless SELF.exists_pos($_);
                          SELF.at_pos($_);
                      } ).eager.Parcel
                  !!  $more.list.map( {
                          SELF.at_pos($_)
                      } ).eager.Parcel;
            }
            else {
                @nogo = <v>;
            }
        }
        elsif nqp::elems($d) == 0 {         # :!delete
            $more.list.map( { SELF.at_pos($_) } ).eager.Parcel;
        }
    }

    @nogo || nqp::elems($d)
      ?? SLICE_HUH( SELF, @nogo, $d, %adv )
      !! result;
} #SLICE_MORE_LIST


# internal 1 element hash access with adverbs
sub SLICE_ONE_HASH(\SELF,$one,*%adv) is hidden_from_backtrace {
    my $d := CLONE-HASH-DECONTAINERIZED(%adv);

    my @nogo;
    my \result = do {

        if DELETEKEY($d,'delete') {            # :delete:*
            if DELETEKEY($d,'SINK') {            # :delete:SINK
                SELF.delete_key($one,:SINK);
            }
            elsif nqp::elems($d) == 0 {       # :delete
                SELF.delete_key($one);
            }
            elsif nqp::existskey($d,'exists') { # :delete:exists(0|1):*
                my $exists   := DELETEKEY($d,'exists');
                my $wasthere := SELF.exists_key($one);
                SELF.delete_key($one);
                if nqp::elems($d) == 0 {          # :delete:exists(0|1)
                    !( $wasthere ?^ $exists )
                }
                elsif nqp::existskey($d,'kv') {   # :delete:exists(0|1):kv(0|1)
                    my $kv := DELETEKEY($d,'kv');
                    if nqp::elems($d) == 0 {
                        !$kv || $wasthere
                          ?? ( $one, !( $wasthere ?^ $exists ) )
                          !! ();
                    }
                    else {
                        @nogo = <delete exists kv>;
                    }
                }
                elsif nqp::existskey($d,'p') {    # :delete:exists(0|1):p(0|1)
                    my $p := DELETEKEY($d,'p');
                    if nqp::elems($d) == 0 {
                        !$p || $wasthere
                          ?? RWPAIR($one, !($wasthere ?^ $exists) )
                          !! ();
                    }
                    else {
                        @nogo = <delete exists p>;
                    }
                }
                else {
                    @nogo = <delete exists>;
                }
            }
            elsif nqp::existskey($d,'kv') {    # :delete:kv(0|1)
                my $kv := DELETEKEY($d,'kv');
                if nqp::elems($d) == 0 {
                    !$kv || SELF.exists_key($one)
                      ?? ( $one, SELF.delete_key($one) )
                      !! ();
                }
                else {
                    @nogo = <delete kv>;
                }
            }
            elsif nqp::existskey($d,'p') {     # :delete:p(0|1)
                my $p := DELETEKEY($d,'p');
                if nqp::elems($d) == 0 {
                    !$p || SELF.exists_key($one)
                      ?? RWPAIR($one, SELF.delete_key($one))
                      !! ();
                }
                else {
                    @nogo = <delete p>;
                }
            }
            elsif nqp::existskey($d,'k') {     # :delete:k(0|1)
                my $k := DELETEKEY($d,'k');
                if nqp::elems($d) == 0 {
                    !$k || SELF.exists_key($one)
                      ?? do { SELF.delete_key($one); $one }
                      !! ();
                }
                else {
                    @nogo = <delete k>;
                }
            }
            elsif nqp::existskey($d,'v') {     # :delete:v(0|1)
                my $v := DELETEKEY($d,'v');
                if nqp::elems($d) == 0 {
                    !$v || SELF.exists_key($one)
                      ?? SELF.delete_key($one)
                      !! ();
                }
                else {
                    @nogo = <delete v>;
                }
            }
            else {
                @nogo = <delete>;
            }
        }
        elsif nqp::existskey($d,'exists') {  # :!delete?:exists(0|1):*
            my $exists  := DELETEKEY($d,'exists');
            my $wasthere = SELF.exists_key($one);
            if nqp::elems($d) == 0 {           # :!delete?:exists(0|1)
                !( $wasthere ?^ $exists )
            }
            elsif nqp::existskey($d,'kv') {    # :!delete?:exists(0|1):kv(0|1)
                my $kv := DELETEKEY($d,'kv');
                if nqp::elems($d) == 0 {
                    !$kv || $wasthere
                      ?? ( $one, !( $wasthere ?^ $exists ) )
                      !! ();
                }
                else {
                    @nogo = <exists kv>;
                }
            }
            elsif nqp::existskey($d,'p') {     # :!delete?:exists(0|1):p(0|1)
                my $p := DELETEKEY($d,'p');
                if nqp::elems($d) == 0 {
                    !$p || $wasthere
                      ?? RWPAIR($one, !( $wasthere ?^ $exists ))
                      !! ();
                }
                else {
                    @nogo = <exists p>;
                }
            }
            else {
                @nogo = <exists>;
            }
        }
        elsif nqp::existskey($d,'kv') {      # :!delete?:kv(0|1):*
            my $kv := DELETEKEY($d,'kv');
            if nqp::elems($d) == 0 {           # :!delete?:kv(0|1)
                !$kv || SELF.exists_key($one)
                  ?? ($one, SELF.at_key($one))
                  !! ();
            }
            else {
                @nogo = <kv>;
            }
        }
        elsif nqp::existskey($d,'p') {       # :!delete?:p(0|1):*
            my $p := DELETEKEY($d,'p');
            if nqp::elems($d) == 0 {           # :!delete?:p(0|1)
                !$p || SELF.exists_key($one)
                  ?? RWPAIR($one, SELF.at_key($one))
                  !! ();
            }
            else {
                @nogo = <p>;
            }
        }
        elsif nqp::existskey($d,'k') {       # :!delete?:k(0|1):*
            my $k := DELETEKEY($d,'k');
            if nqp::elems($d) == 0 {           # :!delete?:k(0|1)
                !$k || SELF.exists_key($one)
                  ?? $one
                  !! ();
            }
            else {
                @nogo = <k>;
            }
        }
        elsif nqp::existskey($d,'v') {       # :!delete?:v(0|1):*
            my $v := DELETEKEY($d,'v');           # :!delete?:v(0|1)
            if nqp::elems($d) == 0 {
                !$v || SELF.exists_key($one)
                  ?? SELF.at_key($one)
                  !! ();
            }
            else {
                @nogo = <v>;
            }
        }
        elsif nqp::elems($d) == 0 {           # :!delete
            SELF.at_key($one);
        }
    }

    @nogo || nqp::elems($d)
      ?? SLICE_HUH( SELF, @nogo, $d, %adv )
      !! result;
} #SLICE_ONE_HASH

# internal >1 element hash access with adverbs
sub SLICE_MORE_HASH(\SELF,$more,*%adv) is hidden_from_backtrace {
    my $d := CLONE-HASH-DECONTAINERIZED(%adv);
    my @nogo;

    my \result = do {

        if DELETEKEY($d,'delete') {            # :delete:*
            if DELETEKEY($d,'SINK') {            # :delete:SINK
                SELF.delete_key($_,:SINK) for $more;
                Nil;
            }
            elsif nqp::elems($d) == 0 {       # :delete
                $more.list.map( { SELF.delete_key($_) } ).eager.Parcel;
            }
            elsif nqp::existskey($d,'exists') { # :delete:exists(0|1):*
                my $exists := DELETEKEY($d,'exists');
                my $wasthere; # no need to initialize every iteration of map
                if nqp::elems($d) == 0 {          # :delete:exists(0|1)
                    $more.list.map( {
                        SELF.delete_key($_) if $wasthere = SELF.exists_key($_);
                        !( $wasthere ?^ $exists );
                    } ).eager.Parcel;
                }
                elsif nqp::existskey($d,'kv') { # :delete:exists(0|1):kv(0|1):*
                    my $kv := DELETEKEY($d,'kv');
                    if nqp::elems($d) == 0 {      # :delete:exists(0|1):kv(0|1)
                        $more.list.map( {
                            SELF.delete_key($_) if $wasthere = SELF.exists_key($_);
                            next unless !$kv || $wasthere;
                            ($_, !( $wasthere ?^ $exists ));
                        } ).flat.eager.Parcel;
                    }
                    else {
                        @nogo = <delete exists kv>;
                    }
                }
                elsif nqp::existskey($d,'p') {  # :delete:exists(0|1):p(0|1):*
                    my $p := DELETEKEY($d,'p');
                    if nqp::elems($d) == 0 {      # :delete:exists(0|1):p(0|1)
                        $more.list.map( {
                            SELF.delete_key($_) if $wasthere = SELF.exists_key($_);
                            next unless !$p || $wasthere;
                            RWPAIR($_,!($wasthere ?^ $exists));
                        } ).eager.Parcel;
                    }
                    else {
                        @nogo = <delete exists p>;
                    }
                }
                else {
                    @nogo = <delete exists>;
                }
            }
            elsif nqp::existskey($d,'kv') {     # :delete:kv(0|1):*
                my $kv := DELETEKEY($d,'kv');
                if nqp::elems($d) == 0 {          # :delete:kv(0|1)
                    $kv
                      ?? $more.list.map( {
                             next unless SELF.exists_key($_);
                             ( $_, SELF.delete_key($_) );
                         } ).flat.eager.Parcel
                      !! $more.list.map( {
                             ( $_, SELF.delete_key($_) )
                         } ).flat.eager.Parcel;
                }
                else {
                    @nogo = <delete kv>;
                }
            }
            elsif nqp::existskey($d,'p') {      # :delete:p(0|1):*
                my $p := DELETEKEY($d,'p');
                if nqp::elems($d) == 0 {          # :delete:p(0|1)
                    $p
                      ?? $more.list.map( {
                             next unless SELF.exists_key($_);
                             RWPAIR($_, SELF.delete_key($_));
                         } ).eager.Parcel
                      !! $more.list.map( {
                             RWPAIR($_, SELF.delete_key($_))
                         } ).eager.Parcel;
                }
                else {
                    @nogo = <delete p>;
                }
            }
            elsif nqp::existskey($d,'k') {     # :delete:k(0|1):*
                my $k := DELETEKEY($d,'k');
                if nqp::elems($d) == 0 {          # :delete:k(0|1)
                    $k
                      ?? $more.list.map( {
                             next unless SELF.exists_key($_);
                             SEQ( SELF.delete_key($_); $_ );
                         } ).eager.Parcel
                      !! $more.list.map( {
                             SELF.delete_key($_); $_
                         } ).eager.Parcel;
                }
                else {
                    @nogo = <delete k>;
                }
            }
            elsif nqp::existskey($d,'v') {      # :delete:v(0|1):*
                my $v := DELETEKEY($d,'v');
                if nqp::elems($d) == 0 {          # :delete:v(0|1)
                    $v
                      ?? $more.list.map( {
                             next unless SELF.exists_key($_);
                             SELF.delete_key($_);
                     } ).eager.Parcel
                      !! $more.list.map( {
                             SELF.delete_key($_)
                     } ).eager.Parcel;
                }
                else {
                    @nogo = <delete v>;
                }
            }
            else {
                @nogo = <delete>;
            }
        }
        elsif nqp::existskey($d,'exists') { # :!delete?:exists(0|1):*
            my $exists := DELETEKEY($d,'exists');
            if nqp::elems($d) == 0 {          # :!delete?:exists(0|1)
                $more.list.map({ !( SELF.exists_key($_) ?^ $exists ) }).eager.Parcel;
            }
            elsif nqp::existskey($d,'kv') {   # :!delete?:exists(0|1):kv(0|1):*
                my $kv := DELETEKEY($d,'kv');
                if nqp::elems($d) == 0 {        # :!delete?:exists(0|1):kv(0|1)
                    $kv
                      ?? $more.list.map( {
                             next unless SELF.exists_key($_);
                             ( $_, $exists );
                         } ).flat.eager.Parcel
                      !! $more.list.map( {
                             ( $_, !( SELF.exists_key($_) ?^ $exists ) )
                         } ).flat.eager.Parcel;
                }
                else {
                    @nogo = <exists kv>;
                }
            }
            elsif nqp::existskey($d,'p') {  # :!delete?:exists(0|1):p(0|1):*
                my $p := DELETEKEY($d,'p');
                if nqp::elems($d) == 0 {      # :!delete?:exists(0|1):p(0|1)
                    $p
                      ?? $more.list.map( {
                             next unless SELF.exists_key($_);
                             RWPAIR( $_, $exists );
                         } ).eager.Parcel
                      !! $more.list.map( {
                             RWPAIR( $_, !( SELF.exists_key($_) ?^ $exists ) )
                         } ).eager.Parcel;
                }
                else {
                    @nogo = <exists p>;
                }
            }
            else {
                @nogo = <exists>;
            }
        }
        elsif nqp::existskey($d,'kv') {     # :!delete?:kv(0|1):*
            my $kv := DELETEKEY($d,'kv');
            if nqp::elems($d) == 0 {          # :!delete?:kv(0|1)
                $kv
                  ?? $more.list.map( {
                         next unless SELF.exists_key($_);
                         $_, SELF.at_key($_);
                     } ).flat.eager.Parcel
                  !! $more.list.map( {
                         $_, SELF.at_key($_)
                     } ).flat.eager.Parcel;
            }
            else {
                @nogo = <kv>;
            }
        }
        elsif nqp::existskey($d,'p') {      # :!delete?:p(0|1):*
            my $p := DELETEKEY($d,'p');
            if nqp::elems($d) == 0 {          # :!delete?:p(0|1)
                $p
                  ?? $more.list.map( {
                         next unless SELF.exists_key($_);
                         RWPAIR($_, SELF.at_key($_));
                     } ).eager.Parcel
                  !! $more.list.map( {
                         RWPAIR( $_, SELF.at_key($_) )
                     } ).eager.Parcel;
            }
            else {
                @nogo = <p>
            }
        }
        elsif nqp::existskey($d,'k') {      # :!delete?:k(0|1):*
            my $k := DELETEKEY($d,'k');
            if nqp::elems($d) == 0 {          # :!delete?:k(0|1)
                $k
                  ?? $more.list.map( {
                         next unless SELF.exists_key($_);
                         $_;
                     } ).eager.Parcel
                  !! $more.list.flat.eager.Parcel;
            }
            else {
                @nogo = <k>;
            }
        }
        elsif nqp::existskey($d,'v') {      # :!delete?:v(0|1):*
            my $v := DELETEKEY($d,'v');
            if nqp::elems($d) == 0 {          # :!delete?:v(0|1)
                $v
                  ??  $more.list.map( {
                          next unless SELF.exists_key($_);
                          SELF.at_key($_);
                      } ).eager.Parcel
                  !!  $more.list.map( {
                          SELF.at_key($_)
                      } ).eager.Parcel;
            }
            else {
                @nogo = <v>;
            }
        }
        elsif nqp::elems($d) == 0 {         # :!delete
            $more.list.map( { SELF.at_key($_) } ).eager.Parcel;
        }
    }

    @nogo || nqp::elems($d)
      ?? SLICE_HUH( SELF, @nogo, $d, %adv )
      !! result;
} #SLICE_MORE_HASH


